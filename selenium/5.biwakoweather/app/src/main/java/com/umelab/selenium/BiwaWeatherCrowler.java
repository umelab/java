/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.umelab.selenium;

import java.util.concurrent.TimeUnit;
import java.util.List;
import java.util.Iterator;

import org.openqa.selenium.By;

import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;

import com.ibm.icu.text.Transliterator;

public class BiwaWeatherCrowler {
    private String url;
    private WebDriver driver;
    private BiwaWeatherModel model;

    /**
     * コンストラクタ
     * @param url
     */
    public BiwaWeatherCrowler(String url) {
        this.url = url;
        init();
    }

    /**
     * モデルを設定
     * @param model
     */
    public void setModel(BiwaWeatherModel model) {
        this.model = model;
    }

    /**
     * init WebDriver
     */
    private void init(){
        ChromeOptions options = new ChromeOptions();
        options.addArguments("--no-sandbox");
        options.addArguments("--headless");
        options.addArguments("--disable-gpu");
        driver = new ChromeDriver(options);
    }
    
    /**
     * 全角を半角に変換
     * @param text
     */
    public static String ToHankaku(String text) {
        Transliterator transliterator = Transliterator.getInstance("Fullwidth-Halfwidth");
        return transliterator.transliterate(text);
    }

    /**
     * htmlからデータを取得
     */
    public void getConnection() {
        driver.get(url);

        String source = driver.getPageSource();
        //System.out.println("source: " + source);
        
        String title = driver.getTitle();
        System.out.println("Web from: " + title);  

        driver.manage().timeouts().implicitlyWait(60, TimeUnit.SECONDS);

        int index = 56;
        // 観測値
        List<WebElement> tempList = driver.findElements(By.className("td-temp"));
        Iterator tempIterator = tempList.iterator();
        while(tempIterator.hasNext()) {
            WebElement element = (WebElement)tempIterator.next();
        }

        Object tempObj[] = tempList.toArray();
        String temperature = ((WebElement)tempObj[index]).getText();
        System.out.println("temperature: " + temperature);
        model.setTemperature(temperature);
        List<WebElement> rainList = driver.findElements(By.className("td-precipitation1h"));
        Iterator rainIterator = rainList.iterator();
        while(rainIterator.hasNext()) {
            WebElement element = (WebElement)rainIterator.next();
        }
        Object rainObj[] = rainList.toArray();
        String rainfall = ((WebElement)rainObj[index]).getText();
        System.out.println("rainfall: " + rainfall);
        model.setRainFall(rainfall);

        List<WebElement> windDList = driver.findElements(By.className("td-windDirection"));
        Iterator windDIterator = windDList.iterator();
        while(windDIterator.hasNext()) {
            WebElement element = (WebElement)windDIterator.next();
        }
        Object windDObj[] = windDList.toArray();
        String windDirection = ((WebElement)windDObj[index]).getText();
        System.out.println("wind direction: " + windDirection);
        model.setWindDirection(windDirection);

        List<WebElement> windSList = driver.findElements(By.className("td-wind"));
        Iterator windSIterator = windDList.iterator();
        while(windSIterator.hasNext()) {
            WebElement element = (WebElement)windSIterator.next();
        }
        Object windSObj[] = windSList.toArray();
        String windSpeed = ((WebElement)windSObj[index]).getText();
        System.out.println("wind speed: " + windSpeed);
        model.setWindSpeed(windSpeed);

        List<WebElement> humList = driver.findElements(By.className("td-humidity"));
        Iterator humIterator = windDList.iterator();
        while(humIterator.hasNext()) {
            WebElement element = (WebElement)humIterator.next();
        }
        Object humObj[] = humList.toArray();
        String humidity = ((WebElement)humObj[index]).getText();
        System.out.println("humidity: " + humidity);
        model.setHumidity(humidity);

        // // 観測値
        // Object obj[] = list.toArray();
        // String rowWaterLevel = ((WebElement)obj[1]).getText();
        // String waterLevel    = rowWaterLevel.split(" ")[2];
        // // 単位を削除
        // waterLevel = waterLevel.substring(0, waterLevel.length() - 2);
        // // 全角を半角に変換
        // waterLevel = ToHankaku(waterLevel);


        // System.out.println("水位: " + waterLevel);
        // System.out.println("放流量: " + outFlow);
        // System.out.println("降水量: " + rainFall);
        // model.setLevel(waterLevel);
        // model.setOutFlow(outFlow);
        // model.setRainFall(rainFall);

        // driverオブジェクト破棄
        driver.quit();
    }
}
