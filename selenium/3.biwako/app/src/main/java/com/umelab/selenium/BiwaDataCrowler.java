/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.umelab.selenium;

import java.util.concurrent.TimeUnit;
import java.util.List;
import java.util.Iterator;

import org.openqa.selenium.By;

import org.openqa.selenium.Capabilities;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.remote.RemoteWebDriver;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.openqa.selenium.support.ui.ExpectedConditions;
import java.time.Duration;

import org.apache.logging.log4j.Logger;
import org.apache.logging.log4j.LogManager;

public class BiwaDataCrowler {
    private static final Logger logger = LogManager.getLogger(BiwaDataCrowler.class);
    private String url;
    private WebDriver driver;
    private BiwaDataModel model;

    public BiwaDataCrowler(String name, String url) {
        logger.info("start BiwaDataCrowler: " + name);
        this.url = url;
        loadDriver();
    }

    public void setModel(BiwaDataModel model) {
        this.model = model;
    }

    /**
     * init WebDriver
     */
    private void loadDriver(){
        try {
            System.setProperty("webdriver.chrome.driver", "/usr/local/bin/chromedriver");
            ChromeOptions options = new ChromeOptions();
            options.addArguments("--no-sandbox");
            options.addArguments("--headless");
            options.addArguments("--disable-gpu");
            driver = new ChromeDriver(options);    
            Capabilities capabilities = ((RemoteWebDriver)driver).getCapabilities();
	        logger.info("chrome ver: " + capabilities.getBrowserVersion());   
        } catch (Exception e) {
            logger.error("Unable to initialize WebDriver", e);
        }
    }

    public void fetchDataFromUrl() {
        try {
            loadPage(url);
            findPageTitle();
            findMeaturedTime();
            findMeasuredValues();
        } catch (Exception e) {
            logger.error("Unable to parse web page: " + url, e);
        } finally {
            driver.quit();
            driver = null;
        }
    }

    /**
     * ページタイトルを取得
     * @throws Exception
     */
    private void loadPage(String url) throws Exception {
        driver.get(url);
        driver.manage().timeouts().implicitlyWait(60, TimeUnit.SECONDS);
    }

    /**
     * ページタイトルを取得
     */
    private void findPageTitle() {
        String title = driver.getTitle();
        logger.info("Web from: " + title);
    }

    private void findMeaturedTime() {
        String cssSelecString = ".tm-pc-detail-info-latest-value.pb-1";
        String trimedLabel = "■最新観測値";
        // 観測時間
        WebElement currentTime = driver.findElement(By.cssSelector(cssSelecString));
        String currentTimeText = currentTime.getText().replace(trimedLabel, "");
        logger.info("meatured time: " + currentTimeText);
        model.setCurrentTime(currentTimeText);
    }

    private void findMeasuredValues() {
        String cssSelecString = "tm-pc-detail-info-curt-value";
        // 観測値ポーリング
/**
        WebDriverWait wait;
        WebElement element;
        try{
          wait = new WebDriverWait(driver, Duration.ofSeconds(1L));
          element = wait.until(ExpectedConditions.visibilityOfElementLocated(By.className(cssSelecString)));
          logger.info("element: " + element.getText());
        } catch (Exception e) {
           logger.error("timeout exeception error", e);
           logger.info("try to reload");
           driver.navigate().refresh();
        }
**/
        // 観測値
        List<WebElement> list = driver.findElements(By.className(cssSelecString));

        // 観測値
        Object obj[] = list.toArray();
        logger.info("temp: " + ((WebElement)obj[0]).getText());
//        logger.info("pH: " + ((WebElement)obj[1]).getText());
//        logger.info("DO: " + ((WebElement)obj[2]).getText());
//        logger.info("Conductivity: " + ((WebElement)obj[3]).getText());
//        logger.info("Turbidity: " + ((WebElement)obj[4]).getText());

        model.setTemp(((WebElement)obj[0]).getText());
        model.setPH(((WebElement)obj[1]).getText());
        model.setDO(((WebElement)obj[2]).getText());
        model.setConductivity(((WebElement)obj[3]).getText());
        model.setTurbidity(((WebElement)obj[4]).getText());
    }
}
